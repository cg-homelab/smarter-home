name: "Pull request merged - Generate git tag with new version"

on:
  pull_request:
    types: 
      - closed
    branches:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  # Get latest tag currently in repo
  generate-tag:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request && github.event.pull_request.merged == true }}
    outputs:
      tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      # Setup node for runner
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      # Install dependencies
      - run: npm install -g semver@7.6.3

      # Get Latest Tag for Repo
      - name: "Get latest tag"
        id: "get-latest-tag"
        run: |
          set -e

          git config --global --add safe.directory /github/workspace

          git fetch --tags
          # This suppress an error occurred when the repository is a complete one.
          git fetch --prune --unshallow || true

          latest_tag=''

          # Get a latest tag in the shape of semver.
          # Define a readable semantic version regex pattern.
          # ^v?                  : Optional 'v' at the start
          # ([0-9]+)\.([0-9]+)\.([0-9]+) : Major.Minor.Patch numbers
          # (?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))? : Optional pre-release, e.g., -alpha.1
          # (?:\+[0-9A-Za-z-]+)? : Optional build metadata, e.g., +001
          # $                     : End of string
          SEMVER_REGEX='^v?\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)\(-\([0-9A-Za-z-]\+\(\.[0-9A-Za-z-]\+\)*\)\)\?\(\+[0-9A-Za-z-]\+\)\?$'
          for ref in $(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags); do
            tag="${ref#refs/tags/}"
            if echo "${tag}" | grep -Eq "${SEMVER_REGEX}"; then
              latest_tag="${tag}"
              break
            fi
          done

          if [ "${latest_tag}" = '' ]; then
            latest_tag="v0.0.0"
          fi

          echo "tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Set bump level
        id: set-bump-level
        uses: actions/github-script@v8
        with:
          script: |
            # Get labels for pull_request
            const { data: labelsData } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const labels = labelsData.map(label => label.name);

            let level = null;
            if (labels.includes('release/major')) {
              level = 'major';
            } else if (labels.includes('release/minor')) {
              level = 'minor';
            } else if (labels.includes('release/patch')) {
              level = 'patch';
            } else {
              level = 'patch';
            }
            core.setOutput('level', level);

      # Bump Semver based on previous tag
      - name: "Bump semantic version"
        id: "bump-semver"
        env:
          INPUT_TAG: ${{ steps.get-latest-tag.outputs.tag }}
          BUMP_LEVEL: ${{ steps.set-bump-level.outputs.level }}
        run: |
          set -e
          # Read inputs from GitHub Actions
          CURRENT_VERSION="${1:-$INPUT_TAG}"
          BUMP_LEVEL="${2:-$BUMP_LEVEL}"

          # Valid bump levels
          VALID_LEVELS=("major" "premajor" "minor" "preminor" "patch" "prepatch" "prerelease")

          # Validate semver
          if ! semver -r "*" "$CURRENT_VERSION" > /dev/null 2>&1; then
            echo "::error::$CURRENT_VERSION is not a valid semver"
            exit 1
          fi

          # Validate bump level
          if [[ ! " ${VALID_LEVELS[*]} " =~ " ${BUMP_LEVEL} " ]]; then
            echo "::error::$BUMP_LEVEL is not a supported bump level. Use one of: ${VALID_LEVELS[*]}"
            exit 1
          fi

          # Check for 'v' prefix
          HAS_V_PREFIX=0
          if [[ "$CURRENT_VERSION" == v* ]]; then
            HAS_V_PREFIX=1
            # Strip the 'v' for processing
            CURRENT_VERSION="${CURRENT_VERSION#v}"
          fi

          # Calculate new version
          NEW_VERSION=$(semver -i "$BUMP_LEVEL" "$CURRENT_VERSION")

          # Add back 'v' prefix if needed
          if [[ "$HAS_V_PREFIX" -eq 1 ]]; then
            NEW_VERSION="v$NEW_VERSION"
          fi

          # Set GitHub Actions output
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # Push new tag to repo
      - name: Push tag
        env:
          TAG: ${{ steps.bump-semver.outputs.new_version }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          MESSAGE="${TAG}: PR #${PR_NUMBER} ${PR_TITLE}"
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${TAG}" -m "${MESSAGE}"
          git push origin "${TAG}"


